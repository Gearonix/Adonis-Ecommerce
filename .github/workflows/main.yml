name: Project preparation and testing
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
permissions:
  contents: write
jobs:
  linting:
    name: Linting project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Installing Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - uses: pnpm/action-setup@v2
        name: Installing pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Getting pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      ##########
      - name: Installing dependencies
        run: pnpm install
      - name: Linting project
        run: npm run lint
  testing:
    name: Testing project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Installing Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - uses: pnpm/action-setup@v2
        name: Installing pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Getting pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Installing dependencies
        run: pnpm install
        ##########
      - name: Unit testing
        run: npm run test --workspace=client
#      - name: Building storybook
#        run: npm run storybook:build --workspace=client
#      - name: Screenshot testing
#        run: npm run loki:build --workspace=client
  building:
    name: Creating a Production Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Installing Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - uses: pnpm/action-setup@v2
        name: Installing pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Getting pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - uses: actions/cache@v3
        name: Setup Next.js cache
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Installing dependencies
        run: pnpm install
        ##########
      - name: Creating a Production Build
        run: npm run build
      - name: Pushing server build to branch build-server
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: build-server
          FOLDER: packages/server/dist
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ({sha}) {msg}"
      - name: Pushing client build to branch build-client
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: build-client
          FOLDER: packages/client/.next
          CLEAR_GLOBS_FILE: ".github/.clear-target-files"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ({sha}) {msg}"


